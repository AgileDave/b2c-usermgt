<?xml version="1.0" encoding="utf-8" ?>
<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="{Settings:Tenant}" PolicyId="B2C_1A_UserName_BuildingBlocks" PublicPolicyUri="http://{Settings:Tenant}/B2C_1A_UserName_BuildingBlocks">

    <BasePolicy>
        <TenantId>{Settings:Tenant}</TenantId>
        <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
    </BasePolicy>

    <BuildingBlocks>
        <ClaimsSchema>
            <ClaimType Id="emails">
                <DisplayName>Email Addresses</DisplayName>
                <DataType>stringCollection</DataType>
                <AdminHelpText>Email addresses of the user.</AdminHelpText>
                <UserHelpText>Your email addresses.</UserHelpText>
            </ClaimType>
            <ClaimType Id="strongAuthenticationEmailAddress">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Email address that the user can use for strong authentication.</AdminHelpText>
                <UserHelpText>Email address to use for strong authentication.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>
            <ClaimType Id="accountEnabled">
                <DisplayName>Account Enabled</DisplayName>
                <DataType>boolean</DataType>
                <AdminHelpText>Specifies whether the user's account is enabled.</AdminHelpText>
                <UserHelpText>Specifies whether your account is enabled.</UserHelpText>
            </ClaimType>
            <ClaimType Id="signInNamesInfo.emailAddress">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Email address that the user can use to sign in.</AdminHelpText>
                <UserHelpText>Email address to use for signing in.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <!-- Flag if user's strong email has been set -->
            <ClaimType Id="hasStrongEmail">
                <DisplayName>Has Strong Email Set</DisplayName>
                <DataType>boolean</DataType>
                <AdminHelpText>Flag used to see if password reset email has been set</AdminHelpText>
                <UserHelpText>Flag used to see if password reset email has been set</UserHelpText>
            </ClaimType>

            <ClaimType Id="extension_verifiedEmailSet">
                <DisplayName>Has verified email been set</DisplayName>
                <DataType>boolean</DataType>
                <AdminHelpText>Flag indicating if the user's verified email has been set</AdminHelpText>
                <UserHelpText>Flag indicating if the user's verified email has been set</UserHelpText>
            </ClaimType>

            <!-- Used for embedding Forgot Password link -->
            <ClaimType Id="isForgotPassword">
                <DisplayName>isForgotPassword</DisplayName>
                <DataType>boolean</DataType>
                <AdminHelpText>Whether the user has clicked Forgot Password</AdminHelpText>
            </ClaimType>


        </ClaimsSchema>
        <ClaimsTransformations>
            <ClaimsTransformation Id="CreateSubjectClaimFromObjectID" TransformationMethod="CreateStringClaim">
                <InputParameters>
                    <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="CreateEmailsFromOtherMailsAndSignInNamesInfo" TransformationMethod="AddItemToStringCollection">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" TransformationClaimType="item" />
                    <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="AddStrongAuthenticationEmailToEmails" TransformationMethod="AddItemToStringCollection">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" TransformationClaimType="item" />
                    <InputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="AssertEmailAndstrongAuthenticationEmailAddressAreEqual" TransformationMethod="AssertStringClaimsAreEqual">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
                </InputParameters>
            </ClaimsTransformation>
            <ClaimsTransformation Id="AssertAccountEnabledIsTrue" TransformationMethod="AssertBooleanClaimIsEqualToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="accountEnabled" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
                </InputParameters>
            </ClaimsTransformation>

            <!-- Read OtherMails for StrongAuthenticationEmailAddress -->
            <ClaimsTransformation Id="CreateEmailFromOtherMails" TransformationMethod="GetSingleItemFromStringCollection">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="extractedItem" />
                </OutputClaims>
            </ClaimsTransformation>

            <!-- Check if user strong email has been set -->
            <ClaimsTransformation Id="HasStrongEmailBeenSet" TransformationMethod="DoesClaimExist">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" TransformationClaimType="inputClaim" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="hasStrongEmail" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="SetStrongEmailSetFlag" TransformationMethod="CopyClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="hasStrongEmail" TransformationClaimType="inputClaim" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="extension_verifiedEmailSet" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

        </ClaimsTransformations>
        <ContentDefinitions>
            <ContentDefinition Id="api.localaccountpasswordchange1.1">
                <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Local account change password page</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="api.signuporsigninwithpasswordreset">
                <LoadUri>~/tenant/default/unified.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:unifiedssp:2.1.2</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Signin and Signup</Item>
                </Metadata>
            </ContentDefinition>

        </ContentDefinitions>
    </BuildingBlocks>
</TrustFrameworkPolicy>