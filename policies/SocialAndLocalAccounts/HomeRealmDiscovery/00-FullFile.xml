<?xml version="1.0" encoding="utf-8" ?>
<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="{Settings:Tenant}" PolicyId="B2C_1A_HRD_BuildingBlocks" PublicPolicyUri="http://{Settings:Tenant}/B2C_1A_HRD_BuildingBlocks">

    <BasePolicy>
        <TenantId>{Settings:Tenant}</TenantId>
        <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
    </BasePolicy>


    <BuildingBlocks>
        <ClaimsSchema>
            <ClaimType Id="signInName">
                <DisplayName>Enter your Email address</DisplayName>
                <UserHelpText>Email address to use for signing in.</UserHelpText>
                <Restriction>
                    <Pattern RegularExpression="^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$" HelpText="The email you provided is not valid." />
                </Restriction>
            </ClaimType>
            <ClaimType Id="identityProviders">
                <DisplayName>IdentityProviders</DisplayName>
                <DataType>stringCollection</DataType>
                <UserHelpText>User identity providers</UserHelpText>
            </ClaimType>
            <ClaimType Id="domainParameter">
                <DisplayName>domainParameter</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>parsed domain value from url</UserHelpText>
            </ClaimType>
            <ClaimType Id="tempDomainParameter">
                <DisplayName>temp domainParameter</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>parsed domain value from url</UserHelpText>
            </ClaimType>
            <ClaimType Id="knownDomain">
                <DisplayName>knownDomain</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>if this a domain that is a customer</UserHelpText>
            </ClaimType>
            <ClaimType Id="isKnownCustomer">
                <DisplayName>knownDomain</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText>if this a domain that is a customer</UserHelpText>
            </ClaimType>
            <ClaimType Id="dummyTrue">
                <DisplayName>dummy value for comparison</DisplayName>
                <DataType>string</DataType>
                <UserHelpText/>
            </ClaimType>
            <ClaimType Id="isAad">
                <DisplayName>knownDomain</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText>if this a domain that is a AAD tenant</UserHelpText>
            </ClaimType>

        </ClaimsSchema>
        <ClaimsTransformations>

            <ClaimsTransformation Id="CheckIfAad" TransformationMethod="StringContains">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="tempDomainParameter" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="contains" DataType="string" Value=".onmicrosoft.com"/>
                    <InputParameter Id="ignoreCase" DataType="string" Value="true"/>
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="isAad" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>


            <ClaimsTransformation Id="CopyDomain" TransformationMethod="CopyClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="tempDomainParameter" TransformationClaimType="inputClaim"/>
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="domainParameter" TransformationClaimType="outputClaim"/>
                </OutputClaims>
            </ClaimsTransformation>

            <!--Demo: Gets the domain portion of the sign-in email address-->
            <ClaimsTransformation Id="ParseDomain" TransformationMethod="ParseDomain">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="emailAddress" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="tempDomainParameter" TransformationClaimType="domain" />
                </OutputClaims>
            </ClaimsTransformation>
            <ClaimsTransformation Id="DomainLookup" TransformationMethod="LookupValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId = "domainParameter" TransformationClaimType="inputParameterId" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id = "onmicrosoft.com" DataType="string" Value="true" />
                    <InputParameter Id = "outlook.com" DataType="string" Value="true" />
                    <InputParameter Id = "facebook.com" DataType="string" Value="true" />
                    <InputParameter Id= "errorOnFailedLookup" DataType="boolean" Value="false" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId = "knownDomain" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CheckDomainParameterValue" TransformationMethod="CompareClaims">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="knownDomain" TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="dummyTrue" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="operator" DataType="string" Value="EQUAL" />
                    <InputParameter Id="ignoreCase" DataType="string" Value="true" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="isKnownCustomer" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateidentityProvidersCollection" TransformationMethod="AddItemToStringCollection">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="domainParameter" TransformationClaimType="item" />
                    <InputClaim ClaimTypeReferenceId="identityProviders" TransformationClaimType="collection" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="identityProviders" TransformationClaimType="collection" />
                </OutputClaims>
            </ClaimsTransformation>
        </ClaimsTransformations>
    </BuildingBlocks>



    <ClaimsProviders>

        <ClaimsProvider>
            <Domain>microsoftonline.com</Domain>
            <DisplayName>Common AAD</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="AADCommon-OpenIdConnect">
                    <DisplayName>Microsoft AAD Login</DisplayName>
                    <Description>Login with your Contoso account</Description>
                    <Protocol Name="OpenIdConnect"/>
                    <Metadata>
                        <Item Key="METADATA">https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration</Item>
                        <!-- Update the Client ID below to the Application ID -->
                        <Item Key="client_id">9bb42244-a0ca-499f-afe0-1428718c9594</Item>
                        <Item Key="response_types">code</Item>
                        <Item Key="scope">openid profile</Item>
                        <Item Key="response_mode">form_post</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="UsePolicyInRedirectUri">false</Item>
                        <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
                        <!-- The key below allows you to specify each of the Azure AD tenants that can be used to sign in. Update the GUIDs below for each tenant. -->
                        <!-- <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000,https://login.microsoftonline.com/11111111-1111-1111-1111-111111111111</Item> -->
                        <!-- The commented key below specifies that users from any tenant can sign-in. Uncomment if you would like anyone with an Azure AD account to be able to sign in. -->
                        <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/</Item>
                        <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
                        <Item Key="ProviderName">Common AAD Endpoint</Item>
                        <Item Key="ClaimTypeOnWhichToEnable">identityProviders</Item>
                        <Item Key="ClaimValueOnWhichToEnable">onmicrosoft.com</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="client_secret" StorageReferenceId="B2C_1A_AADAppSecret"/>
                    </CryptographicKeys>
                    <!-- <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="CreateLoginHintClaim" />
                    </InputClaimsTransformations>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="login_hint" />
                    </InputClaims> -->
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
                        <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid"/>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
                        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
                        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
                </TechnicalProfile>
            </TechnicalProfiles>

        </ClaimsProvider>



        <ClaimsProvider>
            <DisplayName>Parse domain parameter</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="HRDLogic">
                    <DisplayName>ParseDomainHint</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="dummyTrue" DefaultValue="true"/>
                        <InputClaim ClaimTypeReferenceId="signInName"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="identityProviders"/>
                        <OutputClaim ClaimTypeReferenceId="knownDomain" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <!-- <OutputClaimsTransformation ReferenceId="ParseDomain" /> -->
                        <OutputClaimsTransformation ReferenceId="DomainLookup" />
                        <OutputClaimsTransformation ReferenceId="CheckDomainParameterValue" />
                        <OutputClaimsTransformation ReferenceId="CreateidentityProvidersCollection" />
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
                </TechnicalProfile>

                <TechnicalProfile Id="GetDomainAndCheckIfAad">
                    <DisplayName>ParseDomainHint</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="dummyTrue" DefaultValue="true"/>
                        <InputClaim ClaimTypeReferenceId="signInName"/>
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isAad"/>
                        <OutputClaim ClaimTypeReferenceId="tempDomainParameter" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="ParseDomain" />
                        <OutputClaimsTransformation ReferenceId="CheckIfAad" />
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
                </TechnicalProfile>

                <TechnicalProfile Id="SetAadTenantName">
                    <DisplayName>ParseDomainHint</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
                    </Metadata>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="domainParameter" DefaultValue="onmicrosoft.com" AlwaysUseDefaultValue="true" />
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
                </TechnicalProfile>

                <TechnicalProfile Id="SetNonAadTenantName">
                    <DisplayName>ParseDomainHint</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
                    </Metadata>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="domainParameter" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CopyDomain" />
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
                </TechnicalProfile>




            </TechnicalProfiles>
        </ClaimsProvider>


        <ClaimsProvider>
            <!--  The following Domain element allows this profile to be used if the request comes with domain_hint
           query string parameter, e.g. domain_hint=facebook.com   -->
            <Domain>facebook.com</Domain>
            <DisplayName>Facebook</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="Facebook-OAUTH">
                    <!--  The text in the following DisplayName element is shown to the user on the claims provider
               selection screen.  -->
                    <DisplayName>Facebook</DisplayName>
                    <Protocol Name="OAuth2"/>
                    <Metadata>
                        <Item Key="ProviderName">facebook</Item>
                        <Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
                        <Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
                        <Item Key="HttpBinding">GET</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>
                        <!--  The Facebook required HTTP GET method, but the access token response is in JSON format from 3/27/2017  -->
                        <Item Key="AccessTokenResponseFormat">json</Item>
                        <Item Key="client_id">3965079293617599</Item>
                        <Item Key="scope">email public_profile</Item>
                        <Item Key="ClaimTypeOnWhichToEnable">identityProviders</Item>
                        <Item Key="ClaimValueOnWhichToEnable">facebook.com</Item>
                        <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="client_secret" StorageReferenceId="B2C_1A_FacebookSecret"/>
                    </CryptographicKeys>
                    <InputClaims/>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id" />
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="first_name"/>
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="last_name"/>
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="facebook.com"/>
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication"/>
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>


        <ClaimsProvider>
            <Domain>live.com</Domain>
            <DisplayName>Microsoft Account</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="MSA-OIDC">
                    <DisplayName>Microsoft Account</DisplayName>
                    <Protocol Name="OpenIdConnect" />
                    <Metadata>
                        <Item Key="ProviderName">https://login.live.com</Item>
                        <Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
                        <Item Key="response_types">code</Item>
                        <Item Key="response_mode">form_post</Item>
                        <Item Key="scope">openid profile email</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>
                        <Item Key="client_id">651e1987-1600-4908-98da-65a0696c7ee5</Item>
                        <Item Key="ClaimTypeOnWhichToEnable">identityProviders</Item>
                        <Item Key="ClaimValueOnWhichToEnable">outlook.com</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="client_secret" StorageReferenceId="B2C_1A_AADAppSecret" />
                    </CryptographicKeys>
                    <InputClaims>
                        <!--Demo: pass the login_hint to Azure AD home realm discovery page-->
                        <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="login_hint" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="live.com" />
                        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="sub" />
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
                        <OutputClaim ClaimTypeReferenceId="email" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
                        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
                    </OutputClaimsTransformations>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
                    <EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>
        <!--Demo: This technical profile collects the sign-in email address and extracts the sign-in domain name -->
        <ClaimsProvider>
            <DisplayName>Local Account</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="SelfAsserted-Signin-Email">
                    <DisplayName>Local Account Signin</DisplayName>
                    <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
                    </Metadata>
                    <IncludeInSso>false</IncludeInSso>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="signInName" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
                    </OutputClaims>
                    <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <!-- Disable Sign Up-->
        <ClaimsProvider>
            <DisplayName>Local Account</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
                    <Metadata>
                        <Item Key="setting.showSignupLink">false</Item>
                    </Metadata>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>
    </ClaimsProviders>



    <UserJourneys>

        <UserJourney Id="SignIn">

            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-Signin-Email" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="GetDomainAndCheckForAad" TechnicalProfileReferenceId="GetDomainAndCheckIfAad" />
                    </ClaimsExchanges>
                </OrchestrationStep>


                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>isAad</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SetAadTenantName" TechnicalProfileReferenceId="SetAadTenantName" />
                    </ClaimsExchanges>
                </OrchestrationStep>


                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>isAad</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SetNonAadTenantName" TechnicalProfileReferenceId="SetNonAadTenantName" />
                    </ClaimsExchanges>
                </OrchestrationStep>



                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="ParseDomainHintLogic" TechnicalProfileReferenceId="HRDLogic" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- If the domain_hint did not match any known domain, then redirect to a default local account sign in-->
                <OrchestrationStep Order="6" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsProviderSelections>
                        <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
                    </ClaimsProviderSelections>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- dont run this step if the domain was known, or we have an objectid (local account sign in)-->
                <OrchestrationStep Order="7" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- If the domain matched any known domain, then this step will have a single IdP
                    enabled due to each known IdP TP having an enablement flag via identityProviders claim -->
                <OrchestrationStep Order="8" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsProviderSelections>
                        <ClaimsProviderSelection TargetClaimsExchangeId="AADOIDC" />
                        <ClaimsProviderSelection TargetClaimsExchangeId="MSAOIDC" />
                        <!-- <ClaimsProviderSelection TargetClaimsExchangeId="FBOIDC" /> -->
                    </ClaimsProviderSelections>
                </OrchestrationStep>

                <OrchestrationStep Order="9" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADOIDC" TechnicalProfileReferenceId="AADCommon-OpenIdConnect" />
                        <ClaimsExchange Id="MSAOIDC" TechnicalProfileReferenceId="MSA-OIDC" />
                        <!-- <ClaimsExchange Id="FBOIDC" TechnicalProfileReferenceId="Facebook-OAUTH" /> -->
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- For social IDP authentication, attempt to find the user account in the directory. -->
                <OrchestrationStep Order="10" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Still dont have objectId (social idp user that doesnt yet exist) - write the account -->
                <OrchestrationStep Order="11" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="12" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>isKnownCustomer</Value>
                            <Value>True</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="13" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
            </OrchestrationSteps>
            <ClientDefinition ReferenceId="DefaultWeb" />
        </UserJourney>
    </UserJourneys>


    <RelyingParty>
        <DefaultUserJourney ReferenceId="SignIn" />
        <TechnicalProfile Id="PolicyProfile">
            <DisplayName>PolicyProfile</DisplayName>
            <Protocol Name="OpenIdConnect" />
            <OutputClaims>
                <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="firstname"/>
                <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="surname"/>
                <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="displayName"/>
                <OutputClaim ClaimTypeReferenceId="identityProvider" />
                <OutputClaim ClaimTypeReferenceId="email" />
                <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub"/>
                <OutputClaim ClaimTypeReferenceId="identityProviders"/>
                <OutputClaim ClaimTypeReferenceId="tempDomainParameter" />
                <OutputClaim ClaimTypeReferenceId="domainParameter" />
                <OutputClaim ClaimTypeReferenceId="isAad" />
            </OutputClaims>
            <SubjectNamingInfo ClaimType="sub" />
        </TechnicalProfile>
    </RelyingParty>



</TrustFrameworkPolicy>