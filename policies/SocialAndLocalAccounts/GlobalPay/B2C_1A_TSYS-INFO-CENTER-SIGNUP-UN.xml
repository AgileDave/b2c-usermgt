<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="{Settings:Tenant}" PolicyId="B2C_1A_TSYS-Info-Center-SignUp-UN" PublicPolicyUri="http://{Settings:Tenant}/B2C_1A_TSYS-Info-Center-SignUp-UN" TenantObjectId="23496e72-a96a-4b19-b4c7-72a805160515" DeploymentMode="Development" UserJourneyRecorderEndpoint="urn:journeyrecorder:applicationinsights">
  <BasePolicy>
    <TenantId>{Settings:Tenant}</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
  </BasePolicy>
  <BuildingBlocks>
    <ClaimsSchema>
      <!-- InfoCenter app uses Username instead of email for login Fname.Lname or Fname.Mi.Lname -->
      <ClaimType Id="Username">
        <DisplayName>Username</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="Username" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="Username" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/Username" />
        </DefaultPartnerClaimTypes>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="jobTitle">
        <DisplayName>JobTitle</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="jobTitle" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="jobTitle" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/jobTitle" />
        </DefaultPartnerClaimTypes>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="emailAddress">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="emailAddress" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="emailAddress" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/emailAddress" />
        </DefaultPartnerClaimTypes>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="socialIdpUserId">
        <DisplayName>Username</DisplayName>
        <DataType>string</DataType>
        <UserHelpText />
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The username you provided is not valid. It must begin with an alphabet or number and can contain alphabets, numbers and the following symbols: _ -" />
        </Restriction>
      </ClaimType>
      <!-- UPDATES: Added authmethodsreferences and updated displayname-->
      <ClaimType Id="http://schemas.microsoft.com/claims/authnmethodsreferences">
        <DisplayName>Authentication methods</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="displayName">
        <DisplayName>Display Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="unique_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/displayname" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="modUserName">
        <DisplayName>Modified User Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="mod_user_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="mod_user_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/modusername" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
    </ClaimsSchema>
    <ClaimsTransformations>
      <ClaimsTransformation Id="CreateDisplayNameFromFirstNameAndLastName" TransformationMethod="FormatStringMultipleClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}.{1}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="modUserName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateAzureADIdentityProvider" TransformationMethod="ParseDomain">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userPrincipalName" TransformationClaimType="emailAddress" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="domain" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateAlternativeSecurityId_2" TransformationMethod="CreateAlternativeSecurityId">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="socialIdpUserId" TransformationClaimType="key" />
          <InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="identityProvider" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="alternativeSecurityId" TransformationClaimType="alternativeSecurityId" />
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>
    <ContentDefinitions>
      <ContentDefinition Id="api.localaccountsignup">
        <LoadUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</LoadUri>
        <RecoveryUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
          <Item Key="TemplateId">azureBlue</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted">
        <LoadUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</LoadUri>
        <RecoveryUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
          <Item Key="TemplateId">azureBlue</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signuporsignin">
        <LoadUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</LoadUri>
        <RecoveryUri>https://gpb2cdev.blob.core.windows.net/enterprise/login.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:unifiedssp:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Signin</Item>
          <Item Key="TemplateId">azureBlue</Item>
        </Metadata>
      </ContentDefinition>
    </ContentDefinitions>
  </BuildingBlocks>
  <ClaimsProviders>
    <ClaimsProvider>
      <DisplayName>Token Issuer</DisplayName>
      <TechnicalProfiles>
        <!-- SAML Issuer-->
        <!-- TODO update Cryptographic Keys reference, StorageReferenceID to match GP's values-->
        <TechnicalProfile Id="Saml2AssertionIssuer">
          <DisplayName>Token Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>SAML2</OutputTokenFormat>
          <Metadata>
            <Item Key="IssuerUri">https://{Settings:Tenant}/B2C_1A_Tsys-Info-Center-SAML3-UN</Item>
          </Metadata>
          <CryptographicKeys>
            <!-- TODO udpate to GP's StorageReferenceId-->
            <Key Id="SamlAssertionSigning" StorageReferenceId="B2C_1A_InfoCenterSamlCert" />
            <Key Id="SamlMessageSigning" StorageReferenceId="B2C_1A_InfoCenterSamlCert" />
          </CryptographicKeys>
          <InputClaims />
          <OutputClaims />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Saml" />
        </TechnicalProfile>
        <TechnicalProfile Id="SM-Saml">
          <DisplayName>Session Management Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.SamlSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- Azure AD Common - Multi-tenant claims provider -->
    <ClaimsProvider>
      <Domain>AzureAD.com</Domain>
      <DisplayName>Any AzureAD Identity</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AzureADProfile">
          <DisplayName>Global Payments - Employee Login</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <!-- Update the Client ID below to the Application ID -->
            <!-- TODO update client_id to match GP's values-->
            <Item Key="client_id">44ac5495-d2d5-4c8a-91d1-680fa6acad1f</Item>
            <Item Key="IdTokenAudience">c0ea27ff-fc0a-41bd-9a42-7e3e34e70ed6</Item>
            <Item Key="UsePolicyInRedirectUri">0</Item>
            <Item Key="METADATA">https://login.microsoftonline.com/globalpay.com/.well-known/openid-configuration</Item>
            <Item Key="response_types">code</Item>
            <Item Key="scope">openid</Item>
            <Item Key="response_mode">form_post</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
            <!-- The commented key below specifies that users from any tenant can sign-in. Uncomment if you would like anyone with an Azure AD account to be able to sign in. -->
            <Item Key="ValidTokenIssuerPrefixes">https://sts.windows.net/</Item>
          </Metadata>
          <CryptographicKeys>
            <!-- TODO update with GP's StorageReferenceId-->
            <!-- Make sure to update the reference ID of the client secret below you just created (B2C_1A_AADAppSecret) -->
            <Key Id="client_secret" StorageReferenceId="B2C_1A_AzureADAppSecret" />
            <!-- <Key Id="client_secret" StorageReferenceId="B2C_1A_B2CMultitenantAADApp" /> -->
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="socialIdpUserId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="otherMails" PartnerClaimType="otherMails" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
            <!--<OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" /> -->
            <OutputClaim ClaimTypeReferenceId="emailAddress" PartnerClaimType="upn" />
            <OutputClaim ClaimTypeReferenceId="Username" PartnerClaimType="username" />
            <!-- the identityprovider claim (mapped to iss) is commented out because it is avaialble in this technical profile for 
             Azure AD (using protocol = openIdConnect, but it is not avaialble as a claim when using protocol= oauth, in
               the AzureADProfile_issueAADToken. We would have created two user B2C user objects (differnet identityProvider values
              but it would have been the same user (same socialIdpUserID).  TO address this, a new claimsTransformation
              was created, called CreateAzureADIdentityProvider, which extracts the domain portion of the userprincipalname
              and uses that as the identityProvider value.
           Thereforewe want to be consistenet  -->
            <!-- <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" /> -->
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateAzureADIdentityProvider" />
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId_2" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- The following technical profile is used to read data after user authenticates. -->
    <ClaimsProvider>
      <DisplayName>Reading user object</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AAD-UserReadUsingObjectId">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <!-- Required claims -->
            <!-- <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" /> -->
            <!-- Optional claims -->
            <OutputClaim ClaimTypeReferenceId="jobTitle" />
            <!-- <OutputClaim ClaimTypeReferenceId="signInNames.userName" /> -->
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="Username" PartnerClaimType="signInNames.modUserName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateDisplayNameFromFirstNameAndLastName" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- InfoCenter uses Username instead of Email -->
    <ClaimsProvider>
      <DisplayName>Local Account Signin</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Username">
          <DisplayName>Local Account Signin</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="SignUpTarget">SignUpWithLogonUsernameExchange</Item>
            <Item Key="setting.operatingMode">Username</Item>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="password" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="login-NonInteractive" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>
  <UserJourneys>
    <UserJourney Id="SignUpOrGlobalpay_AAD">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <!-- <ClaimsProviderSelection TargetClaimsExchangeId="AzureADExchange" /> -->
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninUsernameExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Check if the user has selected to sign in using one of the social providers -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <!-- <ClaimsExchange Id="SignUpWithLogonUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" /> -->
            <ClaimsExchange Id="AzureADExchange" TechnicalProfileReferenceId="AzureADProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- For social IDP authentication, attempt to find the user account in the directory. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Saml2AssertionIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
  </UserJourneys>
  <RelyingParty>
    <DefaultUserJourney ReferenceId="SignUpOrGlobalpay_AAD" />
    <UserJourneyBehaviors>
      <SingleSignOn Scope="Tenant" />
      <SessionExpiryType>Absolute</SessionExpiryType>
      <SessionExpiryInSeconds>86400</SessionExpiryInSeconds>
      <JourneyInsights TelemetryEngine="ApplicationInsights" InstrumentationKey="4c331080-fad2-485e-87c9-88442bad7efb" DeveloperMode="true" ClientEnabled="true" ServerEnabled="true" TelemetryVersion="1.0.0" />
      <ScriptExecution>Allow</ScriptExecution>
    </UserJourneyBehaviors>
    <TechnicalProfile Id="PolicyProfile">
      <DisplayName>PolicyProfile</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <!-- <Metadata> -->
      <!-- TODO update Partner Entity URL to match GP Saml App's metadata endpoint -->
      <!-- <Item Key="PartnerEntity">https://uat.tsysinfocenter.com/portal/login.aspx</Item> -->
      <!-- <Item Key="KeyEncryptionMethod">Rsa15</Item> -->
      <!-- <Item Key="DataEncryptionMethod">Aes256</Item> -->
      <!-- <Item Key="XmlSignatureAlgorithm">Sha256</Item> -->
      <!-- <Item Key="SpInitiatedProfileEnabled">true</Item> -->
      <!-- <Item Key="WantsSignedAssertions">true</Item> -->
      <!-- <Item Key="IncludeKeyInfo">true</Item> -->
      <!-- <Item Key="IdpInitiatedProfileEnabled">true</Item> -->
      <!-- </Metadata> -->
      <!-- UPDATES: OutputClaims section -->
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="jobTitle" PartnerClaimType="http://schemas.microsoft.com/identity/claims/jobTitle" />
        <OutputClaim ClaimTypeReferenceId="objectId" />
        <OutputClaim ClaimTypeReferenceId="givenName" />
        <OutputClaim ClaimTypeReferenceId="surname" />
        <OutputClaim ClaimTypeReferenceId="modUserName" PartnerClaimType="http://schemas.microsoft.com/identity/claims/modusername" />
        <!-- <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
        <OutputClaim ClaimTypeReferenceId="userPrincipalName" /> -->
        <!-- <OutputClaim ClaimTypeReferenceId="email" /> -->
        <OutputClaim ClaimTypeReferenceId="emailAddress" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="{Policy:TrustFrameworkTenantId}" />
        <!-- added these three output claims-->
        <OutputClaim ClaimTypeReferenceId="tenantId" DefaultValue="{Policy:TenantObjectId}" />
        <OutputClaim ClaimTypeReferenceId="emailAddress" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" />
        <OutputClaim ClaimTypeReferenceId="http://schemas.microsoft.com/claims/authnmethodsreferences" DefaultValue="http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password" />
      </OutputClaims>
      <!-- The ClaimType in the SubjectNamingInfo element below is a reference to the name of the claim added to the claims bag used by the token minting process.
        This name is determined in the following order. If no PartnerClaimType is specified on the output claim above, then the DefaultPartnerClaimType for the protocol specified in the claims schema if one exists is used, otherwise the ClaimTypeReferenceId in the output claim is used.
        For the SubjectNamingInfo below we use the DefaultPartnerClaimType of http://schemas.microsoft.com/identity/claims/objectidentifier, since the output claim does not specify a PartnerClaimType. -->
      <!-- <SubjectNamingInfo ClaimType="objectId" Format="urn:oasis:names:tc:SAML:1.1:nameid-format:persistent"/> -->
      <!-- <SubjectNamingInfo ClaimType="signInName" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/> -->
      <!-- <SubjectNamingInfo ClaimType="signInNames.emailAddress" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/> -->
      <!-- <SubjectNamingInfo ClaimType="emailAddress" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient" /> -->
      <!-- UPDATES: set to use nameid-format:emailAddress -->
      <!-- <SubjectNamingInfo ClaimType="http://schemas.microsoft.com/identity/claims/objectidentifier" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:email" ExcludeAsClaim="true"/> -->
      <SubjectNamingInfo ClaimType="http://schemas.microsoft.com/identity/claims/modusername" Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified" />
    </TechnicalProfile>
  </RelyingParty>
</TrustFrameworkPolicy>